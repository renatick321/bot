import config
import smshub
import activate
import db
import telebot
import json
import requests
from time import sleep
from telebot import types
import qiwi

lib = globals()["smshub"]
bot = telebot.TeleBot(config.TOKEN)
global services
services = lib.smshub
global weblst
weblst = ['sms-hub', "sms-activate"]
country = ["–†–æ—Å—Å–∏—è", "–£–∫—Ä–∞–∏–Ω–∞", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"]
ADMIN = 1198883635


@bot.message_handler(commands=['start'])  # –ù–∞—á–∞–ª–æ –Ω–∞—á–∞–ª
def start_command(message):
    db.user_create(message.chat.id)
    bot.send_message(  
        message.chat.id,  
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å üëë,\n' +  
        '–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏üïû ',
        reply_markup=menu() 
                    )

@bot.message_handler(commands=['cupon'])
def cupon(message):
    if message.chat.id == ADMIN:
        l = list(map(str, message.text.split()))
        if len(l) != 2:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ —Ñ–æ—Ä–º–∞—Ç—É /cupon —Ü–µ–Ω–∞")
        else:
            bot.send_message(message.chat.id, "–ö—É–ø–æ–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—å—Å—è...")
            cupon = db.get_cupon(l[1])
            bot.send_message(message.chat.id, cupon)

@bot.message_handler(commands=['info'])
def info(message):
    if message.chat.id == ADMIN:
        bot.send_message(message.chat.id, db.info(), reply_markup=menu())

@bot.message_handler(commands=['send'])
def send(message):
    if message.chat.id == ADMIN:
        s = message.text[5:]
        users = db.get_users()
        print(users)
        came = 0
        notcame = 0
        for user in users:
            try:
                bot.send_message(user, s, reply_markup=tomenu())
                came += 1
                print(1)
            except:
                notcame += 1
            sleep(0.15)
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–æ—à–ª–∞ –¥–æ {came} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–ù–µ–¥–æ—à–ª–∞ –¥–æ {notcame}–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π".format(came, notcame))
        print(came, notcame)

@bot.message_handler(commands=['admin'])
def admin(message):
    if message.chat.id == ADMIN:
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥—ã\n/cupon —Ü–µ–Ω–∞ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—É–ø–æ–Ω–∞\n/info - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n/send text - —Ä–∞—Å—Å—ã–ª–∫–∞")

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    s = message.text
    if s == "üî• –ù–æ–º–µ—Ä–∞":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –¥–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä", reply_markup=num())
    elif s == "üÜò –ü—Ä–∞–≤–∏–ª–∞":
        bot.send_message(message.chat.id, "1. –ì–ª–∞–≤–Ω–æ–µ:\n1.1 –ú—ã –ø—Ä–æ–¥–∞–µ–º –Ω–æ–º–µ—Ä–∞, –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∫ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é. –í—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∞—Å.\n1.2 –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±—ã–ª —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–æ –Ω–µ –¥–µ–ª–∞—Ç—å –∑–∞–º–µ–Ω—É\n1.3 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –≤–Ω–æ—Å–∏—Ç—å –ª—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ü—Ä–∞–≤–∏–ª–∞, –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è!\n1.4 –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ø—Ä–∞–≤–µ –æ–±–Ω—É–ª–∏—Ç—å –≤–∞—à –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç.\n\n–§–û–†–ú–ê –û–ë–†–ê–©–ï–ù–ò–Ø\n1) –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –±–æ—Ç–æ–º + —Å–∫—Ä–∏–Ω—ã –ø–µ—Ä–µ–ø–∏—Å–∫–∏ + —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã\n2) –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—Ñ—Ñ.—Å–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –∫—É–ø–∏–ª–∏. –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–æ –∏ —Ü–µ–ª—å–Ω–æ–µ. ( –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û ) –û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Ñ–æ—Ä–º—ã –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!!!", reply_markup=menu())
    elif s == "üí∞ –ë–∞–ª–∞–Ω—Å":
        b = db.get_balance(message.chat.id)
        s = int(b) if int(b) == float(b) else float(b)
        bot.send_message(message.chat.id,  "–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(s) + '—Ä.', reply_markup=balance())
        bot.register_next_step_handler(message, money)
    elif s == 'üí© –ü–æ–º–æ—â—å':
        bot.send_message(message.chat.id, '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @freddy_support ', reply_markup=menu())
    elif s == "‚Ü™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©":
        bot.send_message(message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=menu())
    elif s == "üíº –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        lst = db.get_info(message.chat.id)
        bot.send_message(message.chat.id, 'id: {}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {}—à—Ç. \n–°—É–º–º–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫: {}—Ä.'.format(message.chat.id, len(lst), sum(lst)))
    else:
        bot.send_message(message.chat.id, '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', reply_markup=menu())


def money(message):
    s = message.text
    if s == 'üéÅ –ö—É–ø–æ–Ω üéÅ':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫—É–ø–æ–Ω")
        bot.register_next_step_handler(message, cupon_activate)
    elif s == "üí£ –ü–æ–ø–æ–ª–Ω–∏—Ç—å üí£":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã", reply_markup=method_payment())
        bot.register_next_step_handler(message, payment)
    elif s == "‚Ü™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©":
        bot.send_message(message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=menu())
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞!', reply_markup=tomenu())

def cupon_activate(message):
    bot.send_message(message.chat.id, db.cupon_activate(message.chat.id,  message.text), reply_markup=menu())


def payment(message):
    if message.text == "ü•ù –ö–∏–≤–∏":
        print(1)
        comment = db.get_comment()
        print(2)
        bot.send_message(message.chat.id, "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ\nü•ù QIWI-–∫–æ—à–µ–ª–µ–∫: +{}\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: ```{}``` \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n–í–Ω–∏–º–∞–Ω–∏–µ\n–ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Ç—É —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å!\n–ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –æ—à–∏–±–æ—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥, –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–µ –±—É–¥–µ—Ç!\n–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'!\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ".format(qiwi.NUMBER, comment), parse_mode="Markdown", reply_markup=tomenu())
        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã", reply_markup=cash_check(comment))
    elif message.text == '‚Ü™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©':
        bot.send_message(message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=menu())
    else:
        bot.send_message(message.chat.id, "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π", reply_markup=menu())



@bot.callback_query_handler(func=lambda call: call.data.isdigit())
def check_button(call):
    comments = qiwi.get_comments()
    if call.data in list(comments.keys()):
        cash = comments[call.data]
        db.replenishment(call.message.chat.id, cash)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        bot.send_message(ADMIN, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É {} —Ä—É–±.\nID: {}".format(cash, call.message.chat.id))
    else:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–∏—à–ª–∞, –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞", reply_markup=cash_check(call.data))



@bot.callback_query_handler(func=lambda call: call.data == "–ó–∞–∫–æ–Ω—á–∏—Ç—å")
def end_number(call):
    number.edit_status(6)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "–ê—Ä–µ–Ω–¥–∞ –Ω–æ–º–µ—Ä–∞ –±—ã–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞", reply_markup=menu())

@bot.callback_query_handler(func=lambda call: call.data == "–ï—â—ë —Å–º—Å")
def end_number(call):
    number.edit_status(3)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏—Ö–æ–¥–∞ –µ—â—ë –æ–¥–Ω–æ–≥–æ —Å–º—Å", reply_markup=number_end())
    s = number.get_sms()
    print(s)
    if s == '–ê—Ä–µ–Ω–¥–∞ –Ω–æ–º–µ—Ä–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞':
        cash = db.get_last_payment(call.message.chat.id)
        number.edit_status(6)
        bot.delete_message(call.message.chat.id, call.message.message_id + 1)
    else:
        bot.delete_message(call.message.chat.id, call.message.message_id + 1)
        bot.send_message(call.message.chat.id, "–í–∞—à –∫–æ–¥: ```" + str(s) + '```\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π', reply_markup=number_sms(), parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "–û—Ç–º–µ–Ω–∏—Ç—å")
def cancel(call):
    number.edit_status(8)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=menu())



@bot.callback_query_handler(func=lambda call: call.data == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def gotomenu(call):
    bot.send_message(call.message.chat.id, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=menu())


@bot.callback_query_handler(func=lambda call: call.data in services.keys())
def service_btn(call):
    bot.send_message(call.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=web())
    global choice
    print(call.data)
    choice = call.data


@bot.callback_query_handler(func=lambda call: call.data in weblst)
def get_sms(call):
    global lib
    if call.data == 'sms-activate':
        lib = globals()["activate"]
    elif call.data == 'sms-hub':
        lib = globals()["smshub"]
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç—Ä–∞–Ω—É', reply_markup=country_btns())


@bot.callback_query_handler(func=lambda call: call.data in country)
def get_number(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    global number
    number = lib.Number(services[choice], call.data)
    price = lib.get_price(services[choice], call.data)
    if price == "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏":
        bot.send_message(call.message.chat.id, "–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –≤ –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Ç—É –Ω–æ–º–µ—Ä–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∏–ª–∏ –ø–æ–º–µ–Ω—è–π—Ç–µ —Å—Ç—Ä–∞–Ω—É, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    elif str(number) and float(price[::-1][2:][::-1]) <= db.get_balance(call.message.chat.id):
        s = '–°–µ—Ä–≤–∏—Å: {}\n–ù–æ–º–µ—Ä:  {}\n–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏—Ö–æ–¥–∞ —Å–º—Å\n\n–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 4 –º–∏–Ω—É—Ç —Å–º—Å –Ω–µ –ø—Ä–∏–π–¥—ë—Ç, –∞—Ä–µ–Ω–¥–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø–æ—Å–ª–µ –¥–µ–Ω—å–≥–∏, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –Ω–∞ –∞—Ä–µ–Ω–¥—É –¥–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞, –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –∫ –≤–∞–º –Ω–∞ —Å—á—ë—Ç'.format(choice, str(number))
        bot.send_message(call.message.chat.id, s, reply_markup=end_sms())
        s = number.get_sms()
        print(s)
        if s == '–ê—Ä–µ–Ω–¥–∞ –Ω–æ–º–µ—Ä–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞':
            cash = db.get_last_payment(call.message.chat.id)
            number.edit_status(8)
            bot.delete_message(call.message.chat.id, call.message.message_id + 1)
        else:
            bot.delete_message(call.message.chat.id, call.message.message_id + 1)
            db.buy(choice, str(number), call.message.chat.id, float(price[::-1][2:][::-1]))
            bot.send_message(call.message.chat.id, "–í–∞—à –∫–æ–¥: ```" + str(s) + '```\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π', reply_markup=number_sms(), parse_mode="Markdown")

    else:
        try:
            number.edit_status(8)
        except:
            pass
        bot.send_message(call.message.chat.id, "–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=menu())

def cash_check(comment):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=comment))
    return keyboard


def number_end():
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton("‚õî –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data='–ó–∞–∫–æ–Ω—á–∏—Ç—å'))
    return keyboard

def number_sms():
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton("‚úâ –ï—â—ë —Å–º—Å", callback_data='–ï—â—ë —Å–º—Å'))
    keyboard.row(types.InlineKeyboardButton("‚õî –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data='–ó–∞–∫–æ–Ω—á–∏—Ç—å'))
    return keyboard

def end_sms():
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='–û—Ç–º–µ–Ω–∏—Ç—å'))
    return keyboard


def country_btns():
    keyboard = telebot.types.InlineKeyboardMarkup()
    ru = lib.get_price(services[choice], "–†–æ—Å—Å–∏—è")
    ua = lib.get_price(services[choice], "–£–∫—Ä–∞–∏–Ω–∞")
    kz = lib.get_price(services[choice], "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω")
    keyboard.row(types.InlineKeyboardButton("üá∑üá∫ –†–æ—Å—Å–∏—è | {}".format(ru), callback_data='–†–æ—Å—Å–∏—è'))
    keyboard.row(types.InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞ | {}".format(ua), callback_data='–£–∫—Ä–∞–∏–Ω–∞'))
    keyboard.row(types.InlineKeyboardButton("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω | {}".format(kz), callback_data='–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω'))
    return keyboard

def web():
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton("üî• –î–µ—à—ë–≤—ã–µ üî•", callback_data='sms-hub'))
    keyboard.row(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ ‚úÖ", callback_data='sms-activate'))
    #keyboard.row(types.InlineKeyboardButton("sms-online", callback_data='sms-online'))
    return keyboard

def num():
    keyboard = telebot.types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('Telegram', callback_data='Telegram')
    btn2 = types.InlineKeyboardButton('Whatsapp', callback_data='Whatsapp')
    keyboard.add(btn1, btn2)
    btn1 = types.InlineKeyboardButton('–í–∫–æ–Ω—Ç–∞–∫—Ç–µ', callback_data='–í–∫–æ–Ω—Ç–∞–∫—Ç–µ')
    btn2 = types.InlineKeyboardButton('Avito', callback_data='Avito')
    keyboard.add(btn1, btn2)
    btn1 = types.InlineKeyboardButton('Qiwi', callback_data='Qiwi')
    btn2 = types.InlineKeyboardButton('–ü—è—Ç–µ—Ä–æ—á–∫–∞', callback_data='–ü—è—Ç–µ—Ä–æ—á–∫–∞')
    keyboard.add(btn1, btn2)
    btn1 = types.InlineKeyboardButton('McDonalds', callback_data='McDonalds')
    btn2 = types.InlineKeyboardButton('PayPal', callback_data='PayPal')
    keyboard.add(btn1, btn2)
    btn1 = types.InlineKeyboardButton('Burger King', callback_data='Burger King')
    btn2 = types.InlineKeyboardButton('–Ø–Ω–¥–µ–∫—Å', callback_data='–Ø–Ω–¥–µ–∫—Å')
    keyboard.add(btn1, btn2)
    btn1 = types.InlineKeyboardButton('BlaBlaCar', callback_data='BlaBlaCar')
    btn2 = types.InlineKeyboardButton('Instagram', callback_data='Instagram')
    keyboard.add(btn1, btn2)
    btn1 = types.InlineKeyboardButton('Google', callback_data='Google')
    btn2 = types.InlineKeyboardButton('Steam', callback_data='Steam')
    keyboard.add(btn1, btn2)
    keyboard.add(types.InlineKeyboardButton('‚Ü™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©', callback_data='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    return keyboard

def tomenu():
    keyboard = types.ReplyKeyboardMarkup(True, True)
    keyboard.row("‚Ü™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©")
    return keyboard

def balance():
    keyboard = types.ReplyKeyboardMarkup(True, True)
    keyboard.row("üéÅ –ö—É–ø–æ–Ω üéÅ", "üí£ –ü–æ–ø–æ–ª–Ω–∏—Ç—å üí£")
    keyboard.row("‚Ü™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©")
    return keyboard

def menu():
    keyboard = types.ReplyKeyboardMarkup(True, True)
    keyboard.row("üî• –ù–æ–º–µ—Ä–∞", "üÜò –ü—Ä–∞–≤–∏–ª–∞", "üí∞ –ë–∞–ª–∞–Ω—Å")
    keyboard.row('üí© –ü–æ–º–æ—â—å', "üíº –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    return keyboard

def method_payment():
    keyboard = types.ReplyKeyboardMarkup(True, True)
    keyboard.row("ü•ù –ö–∏–≤–∏")
    keyboard.row("‚Ü™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ü©")
    return keyboard


bot.polling(none_stop=True)